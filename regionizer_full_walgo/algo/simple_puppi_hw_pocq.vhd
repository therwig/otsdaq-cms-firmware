-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.1
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity simple_puppi_hw_pocq_rom is 
    generic(
             dwidth     : integer := 8; 
             awidth     : integer := 11; 
             mem_size    : integer := 1174
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          addr1      : in std_logic_vector(awidth-1 downto 0); 
          ce1       : in std_logic; 
          q1         : out std_logic_vector(dwidth-1 downto 0);
          addr2      : in std_logic_vector(awidth-1 downto 0); 
          ce2       : in std_logic; 
          q2         : out std_logic_vector(dwidth-1 downto 0);
          addr3      : in std_logic_vector(awidth-1 downto 0); 
          ce3       : in std_logic; 
          q3         : out std_logic_vector(dwidth-1 downto 0);
          addr4      : in std_logic_vector(awidth-1 downto 0); 
          ce4       : in std_logic; 
          q4         : out std_logic_vector(dwidth-1 downto 0);
          addr5      : in std_logic_vector(awidth-1 downto 0); 
          ce5       : in std_logic; 
          q5         : out std_logic_vector(dwidth-1 downto 0);
          addr6      : in std_logic_vector(awidth-1 downto 0); 
          ce6       : in std_logic; 
          q6         : out std_logic_vector(dwidth-1 downto 0);
          addr7      : in std_logic_vector(awidth-1 downto 0); 
          ce7       : in std_logic; 
          q7         : out std_logic_vector(dwidth-1 downto 0);
          addr8      : in std_logic_vector(awidth-1 downto 0); 
          ce8       : in std_logic; 
          q8         : out std_logic_vector(dwidth-1 downto 0);
          addr9      : in std_logic_vector(awidth-1 downto 0); 
          ce9       : in std_logic; 
          q9         : out std_logic_vector(dwidth-1 downto 0);
          addr10      : in std_logic_vector(awidth-1 downto 0); 
          ce10       : in std_logic; 
          q10         : out std_logic_vector(dwidth-1 downto 0);
          addr11      : in std_logic_vector(awidth-1 downto 0); 
          ce11       : in std_logic; 
          q11         : out std_logic_vector(dwidth-1 downto 0);
          addr12      : in std_logic_vector(awidth-1 downto 0); 
          ce12       : in std_logic; 
          q12         : out std_logic_vector(dwidth-1 downto 0);
          addr13      : in std_logic_vector(awidth-1 downto 0); 
          ce13       : in std_logic; 
          q13         : out std_logic_vector(dwidth-1 downto 0);
          addr14      : in std_logic_vector(awidth-1 downto 0); 
          ce14       : in std_logic; 
          q14         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of simple_puppi_hw_pocq_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
signal addr1_tmp : std_logic_vector(awidth-1 downto 0); 
signal addr2_tmp : std_logic_vector(awidth-1 downto 0); 
signal addr3_tmp : std_logic_vector(awidth-1 downto 0); 
signal addr4_tmp : std_logic_vector(awidth-1 downto 0); 
signal addr5_tmp : std_logic_vector(awidth-1 downto 0); 
signal addr6_tmp : std_logic_vector(awidth-1 downto 0); 
signal addr7_tmp : std_logic_vector(awidth-1 downto 0); 
signal addr8_tmp : std_logic_vector(awidth-1 downto 0); 
signal addr9_tmp : std_logic_vector(awidth-1 downto 0); 
signal addr10_tmp : std_logic_vector(awidth-1 downto 0); 
signal addr11_tmp : std_logic_vector(awidth-1 downto 0); 
signal addr12_tmp : std_logic_vector(awidth-1 downto 0); 
signal addr13_tmp : std_logic_vector(awidth-1 downto 0); 
signal addr14_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem0 : mem_array := (
    0 to 21=> "00000000", 22 => "00000010", 23 => "00000110", 24 => "00001011", 
    25 => "00001111", 26 => "00010011", 27 => "00010111", 28 => "00011010", 
    29 => "00011110", 30 => "00100001", 31 => "00100101", 32 => "00101000", 
    33 => "00101011", 34 => "00101110", 35 => "00110001", 36 => "00110100", 
    37 => "00110110", 38 => "00111001", 39 => "00111011", 40 => "00111110", 
    41 => "01000000", 42 => "01000011", 43 => "01000101", 44 => "01000111", 
    45 => "01001001", 46 => "01001011", 47 => "01001101", 48 => "01001111", 
    49 => "01010001", 50 => "01010011", 51 => "01010101", 52 => "01010111", 
    53 => "01011001", 54 => "01011010", 55 => "01011100", 56 => "01011110", 
    57 => "01011111", 58 => "01100001", 59 => "01100010", 60 => "01100100", 
    61 => "01100101", 62 => "01100111", 63 => "01101000", 64 => "01101010", 
    65 => "01101011", 66 => "01101100", 67 => "01101110", 68 => "01101111", 
    69 => "01110000", 70 => "01110001", 71 => "01110011", 72 => "01110100", 
    73 => "01110101", 74 => "01110110", 75 => "01110111", 76 => "01111000", 
    77 => "01111010", 78 => "01111011", 79 => "01111100", 80 => "01111101", 
    81 => "01111110", 82 => "01111111", 83 => "10000000", 84 => "10000001", 
    85 => "10000010", 86 to 87=> "10000011", 88 => "10000100", 89 => "10000101", 
    90 => "10000110", 91 => "10000111", 92 => "10001000", 93 => "10001001", 
    94 to 95=> "10001010", 96 => "10001011", 97 => "10001100", 98 => "10001101", 
    99 to 100=> "10001110", 101 => "10001111", 102 to 103=> "10010000", 104 => "10010001", 
    105 => "10010010", 106 to 107=> "10010011", 108 => "10010100", 109 to 110=> "10010101", 
    111 => "10010110", 112 to 113=> "10010111", 114 => "10011000", 115 to 116=> "10011001", 
    117 to 118=> "10011010", 119 => "10011011", 120 to 121=> "10011100", 122 to 123=> "10011101", 
    124 to 125=> "10011110", 126 => "10011111", 127 to 128=> "10100000", 129 to 130=> "10100001", 
    131 to 132=> "10100010", 133 to 134=> "10100011", 135 to 136=> "10100100", 137 to 138=> "10100101", 
    139 to 140=> "10100110", 141 to 143=> "10100111", 144 to 145=> "10101000", 146 to 147=> "10101001", 
    148 to 149=> "10101010", 150 to 152=> "10101011", 153 to 154=> "10101100", 155 to 157=> "10101101", 
    158 to 159=> "10101110", 160 to 162=> "10101111", 163 to 165=> "10110000", 166 to 167=> "10110001", 
    168 to 170=> "10110010", 171 to 173=> "10110011", 174 to 176=> "10110100", 177 to 179=> "10110101", 
    180 to 182=> "10110110", 183 to 185=> "10110111", 186 to 189=> "10111000", 190 to 192=> "10111001", 
    193 to 196=> "10111010", 197 to 199=> "10111011", 200 to 203=> "10111100", 204 to 207=> "10111101", 
    208 to 211=> "10111110", 212 to 215=> "10111111", 216 to 219=> "11000000", 220 to 223=> "11000001", 
    224 to 227=> "11000010", 228 to 232=> "11000011", 233 to 237=> "11000100", 238 to 242=> "11000101", 
    243 to 246=> "11000110", 247 to 252=> "11000111", 253 to 257=> "11001000", 258 to 263=> "11001001", 
    264 to 268=> "11001010", 269 to 274=> "11001011", 275 to 280=> "11001100", 281 to 287=> "11001101", 
    288 to 293=> "11001110", 294 to 300=> "11001111", 301 to 307=> "11010000", 308 to 315=> "11010001", 
    316 to 322=> "11010010", 323 to 330=> "11010011", 331 to 339=> "11010100", 340 to 347=> "11010101", 
    348 to 357=> "11010110", 358 to 366=> "11010111", 367 to 376=> "11011000", 377 to 386=> "11011001", 
    387 to 397=> "11011010", 398 to 409=> "11011011", 410 to 421=> "11011100", 422 to 434=> "11011101", 
    435 to 447=> "11011110", 448 to 461=> "11011111", 462 to 476=> "11100000", 477 to 492=> "11100001", 
    493 to 509=> "11100010", 510 to 527=> "11100011", 528 to 546=> "11100100", 547 to 566=> "11100101", 
    567 to 588=> "11100110", 589 to 611=> "11100111", 612 to 636=> "11101000", 637 to 663=> "11101001", 
    664 to 693=> "11101010", 694 to 725=> "11101011", 726 to 760=> "11101100", 761 to 798=> "11101101", 
    799 to 840=> "11101110", 841 to 886=> "11101111", 887 to 938=> "11110000", 939 to 996=> "11110001", 
    997 to 1062=> "11110010", 1063 to 1137=> "11110011", 1138 to 1173=> "11110100" );
signal mem1 : mem_array := (
    0 to 21=> "00000000", 22 => "00000010", 23 => "00000110", 24 => "00001011", 
    25 => "00001111", 26 => "00010011", 27 => "00010111", 28 => "00011010", 
    29 => "00011110", 30 => "00100001", 31 => "00100101", 32 => "00101000", 
    33 => "00101011", 34 => "00101110", 35 => "00110001", 36 => "00110100", 
    37 => "00110110", 38 => "00111001", 39 => "00111011", 40 => "00111110", 
    41 => "01000000", 42 => "01000011", 43 => "01000101", 44 => "01000111", 
    45 => "01001001", 46 => "01001011", 47 => "01001101", 48 => "01001111", 
    49 => "01010001", 50 => "01010011", 51 => "01010101", 52 => "01010111", 
    53 => "01011001", 54 => "01011010", 55 => "01011100", 56 => "01011110", 
    57 => "01011111", 58 => "01100001", 59 => "01100010", 60 => "01100100", 
    61 => "01100101", 62 => "01100111", 63 => "01101000", 64 => "01101010", 
    65 => "01101011", 66 => "01101100", 67 => "01101110", 68 => "01101111", 
    69 => "01110000", 70 => "01110001", 71 => "01110011", 72 => "01110100", 
    73 => "01110101", 74 => "01110110", 75 => "01110111", 76 => "01111000", 
    77 => "01111010", 78 => "01111011", 79 => "01111100", 80 => "01111101", 
    81 => "01111110", 82 => "01111111", 83 => "10000000", 84 => "10000001", 
    85 => "10000010", 86 to 87=> "10000011", 88 => "10000100", 89 => "10000101", 
    90 => "10000110", 91 => "10000111", 92 => "10001000", 93 => "10001001", 
    94 to 95=> "10001010", 96 => "10001011", 97 => "10001100", 98 => "10001101", 
    99 to 100=> "10001110", 101 => "10001111", 102 to 103=> "10010000", 104 => "10010001", 
    105 => "10010010", 106 to 107=> "10010011", 108 => "10010100", 109 to 110=> "10010101", 
    111 => "10010110", 112 to 113=> "10010111", 114 => "10011000", 115 to 116=> "10011001", 
    117 to 118=> "10011010", 119 => "10011011", 120 to 121=> "10011100", 122 to 123=> "10011101", 
    124 to 125=> "10011110", 126 => "10011111", 127 to 128=> "10100000", 129 to 130=> "10100001", 
    131 to 132=> "10100010", 133 to 134=> "10100011", 135 to 136=> "10100100", 137 to 138=> "10100101", 
    139 to 140=> "10100110", 141 to 143=> "10100111", 144 to 145=> "10101000", 146 to 147=> "10101001", 
    148 to 149=> "10101010", 150 to 152=> "10101011", 153 to 154=> "10101100", 155 to 157=> "10101101", 
    158 to 159=> "10101110", 160 to 162=> "10101111", 163 to 165=> "10110000", 166 to 167=> "10110001", 
    168 to 170=> "10110010", 171 to 173=> "10110011", 174 to 176=> "10110100", 177 to 179=> "10110101", 
    180 to 182=> "10110110", 183 to 185=> "10110111", 186 to 189=> "10111000", 190 to 192=> "10111001", 
    193 to 196=> "10111010", 197 to 199=> "10111011", 200 to 203=> "10111100", 204 to 207=> "10111101", 
    208 to 211=> "10111110", 212 to 215=> "10111111", 216 to 219=> "11000000", 220 to 223=> "11000001", 
    224 to 227=> "11000010", 228 to 232=> "11000011", 233 to 237=> "11000100", 238 to 242=> "11000101", 
    243 to 246=> "11000110", 247 to 252=> "11000111", 253 to 257=> "11001000", 258 to 263=> "11001001", 
    264 to 268=> "11001010", 269 to 274=> "11001011", 275 to 280=> "11001100", 281 to 287=> "11001101", 
    288 to 293=> "11001110", 294 to 300=> "11001111", 301 to 307=> "11010000", 308 to 315=> "11010001", 
    316 to 322=> "11010010", 323 to 330=> "11010011", 331 to 339=> "11010100", 340 to 347=> "11010101", 
    348 to 357=> "11010110", 358 to 366=> "11010111", 367 to 376=> "11011000", 377 to 386=> "11011001", 
    387 to 397=> "11011010", 398 to 409=> "11011011", 410 to 421=> "11011100", 422 to 434=> "11011101", 
    435 to 447=> "11011110", 448 to 461=> "11011111", 462 to 476=> "11100000", 477 to 492=> "11100001", 
    493 to 509=> "11100010", 510 to 527=> "11100011", 528 to 546=> "11100100", 547 to 566=> "11100101", 
    567 to 588=> "11100110", 589 to 611=> "11100111", 612 to 636=> "11101000", 637 to 663=> "11101001", 
    664 to 693=> "11101010", 694 to 725=> "11101011", 726 to 760=> "11101100", 761 to 798=> "11101101", 
    799 to 840=> "11101110", 841 to 886=> "11101111", 887 to 938=> "11110000", 939 to 996=> "11110001", 
    997 to 1062=> "11110010", 1063 to 1137=> "11110011", 1138 to 1173=> "11110100" );
signal mem2 : mem_array := (
    0 to 21=> "00000000", 22 => "00000010", 23 => "00000110", 24 => "00001011", 
    25 => "00001111", 26 => "00010011", 27 => "00010111", 28 => "00011010", 
    29 => "00011110", 30 => "00100001", 31 => "00100101", 32 => "00101000", 
    33 => "00101011", 34 => "00101110", 35 => "00110001", 36 => "00110100", 
    37 => "00110110", 38 => "00111001", 39 => "00111011", 40 => "00111110", 
    41 => "01000000", 42 => "01000011", 43 => "01000101", 44 => "01000111", 
    45 => "01001001", 46 => "01001011", 47 => "01001101", 48 => "01001111", 
    49 => "01010001", 50 => "01010011", 51 => "01010101", 52 => "01010111", 
    53 => "01011001", 54 => "01011010", 55 => "01011100", 56 => "01011110", 
    57 => "01011111", 58 => "01100001", 59 => "01100010", 60 => "01100100", 
    61 => "01100101", 62 => "01100111", 63 => "01101000", 64 => "01101010", 
    65 => "01101011", 66 => "01101100", 67 => "01101110", 68 => "01101111", 
    69 => "01110000", 70 => "01110001", 71 => "01110011", 72 => "01110100", 
    73 => "01110101", 74 => "01110110", 75 => "01110111", 76 => "01111000", 
    77 => "01111010", 78 => "01111011", 79 => "01111100", 80 => "01111101", 
    81 => "01111110", 82 => "01111111", 83 => "10000000", 84 => "10000001", 
    85 => "10000010", 86 to 87=> "10000011", 88 => "10000100", 89 => "10000101", 
    90 => "10000110", 91 => "10000111", 92 => "10001000", 93 => "10001001", 
    94 to 95=> "10001010", 96 => "10001011", 97 => "10001100", 98 => "10001101", 
    99 to 100=> "10001110", 101 => "10001111", 102 to 103=> "10010000", 104 => "10010001", 
    105 => "10010010", 106 to 107=> "10010011", 108 => "10010100", 109 to 110=> "10010101", 
    111 => "10010110", 112 to 113=> "10010111", 114 => "10011000", 115 to 116=> "10011001", 
    117 to 118=> "10011010", 119 => "10011011", 120 to 121=> "10011100", 122 to 123=> "10011101", 
    124 to 125=> "10011110", 126 => "10011111", 127 to 128=> "10100000", 129 to 130=> "10100001", 
    131 to 132=> "10100010", 133 to 134=> "10100011", 135 to 136=> "10100100", 137 to 138=> "10100101", 
    139 to 140=> "10100110", 141 to 143=> "10100111", 144 to 145=> "10101000", 146 to 147=> "10101001", 
    148 to 149=> "10101010", 150 to 152=> "10101011", 153 to 154=> "10101100", 155 to 157=> "10101101", 
    158 to 159=> "10101110", 160 to 162=> "10101111", 163 to 165=> "10110000", 166 to 167=> "10110001", 
    168 to 170=> "10110010", 171 to 173=> "10110011", 174 to 176=> "10110100", 177 to 179=> "10110101", 
    180 to 182=> "10110110", 183 to 185=> "10110111", 186 to 189=> "10111000", 190 to 192=> "10111001", 
    193 to 196=> "10111010", 197 to 199=> "10111011", 200 to 203=> "10111100", 204 to 207=> "10111101", 
    208 to 211=> "10111110", 212 to 215=> "10111111", 216 to 219=> "11000000", 220 to 223=> "11000001", 
    224 to 227=> "11000010", 228 to 232=> "11000011", 233 to 237=> "11000100", 238 to 242=> "11000101", 
    243 to 246=> "11000110", 247 to 252=> "11000111", 253 to 257=> "11001000", 258 to 263=> "11001001", 
    264 to 268=> "11001010", 269 to 274=> "11001011", 275 to 280=> "11001100", 281 to 287=> "11001101", 
    288 to 293=> "11001110", 294 to 300=> "11001111", 301 to 307=> "11010000", 308 to 315=> "11010001", 
    316 to 322=> "11010010", 323 to 330=> "11010011", 331 to 339=> "11010100", 340 to 347=> "11010101", 
    348 to 357=> "11010110", 358 to 366=> "11010111", 367 to 376=> "11011000", 377 to 386=> "11011001", 
    387 to 397=> "11011010", 398 to 409=> "11011011", 410 to 421=> "11011100", 422 to 434=> "11011101", 
    435 to 447=> "11011110", 448 to 461=> "11011111", 462 to 476=> "11100000", 477 to 492=> "11100001", 
    493 to 509=> "11100010", 510 to 527=> "11100011", 528 to 546=> "11100100", 547 to 566=> "11100101", 
    567 to 588=> "11100110", 589 to 611=> "11100111", 612 to 636=> "11101000", 637 to 663=> "11101001", 
    664 to 693=> "11101010", 694 to 725=> "11101011", 726 to 760=> "11101100", 761 to 798=> "11101101", 
    799 to 840=> "11101110", 841 to 886=> "11101111", 887 to 938=> "11110000", 939 to 996=> "11110001", 
    997 to 1062=> "11110010", 1063 to 1137=> "11110011", 1138 to 1173=> "11110100" );
signal mem3 : mem_array := (
    0 to 21=> "00000000", 22 => "00000010", 23 => "00000110", 24 => "00001011", 
    25 => "00001111", 26 => "00010011", 27 => "00010111", 28 => "00011010", 
    29 => "00011110", 30 => "00100001", 31 => "00100101", 32 => "00101000", 
    33 => "00101011", 34 => "00101110", 35 => "00110001", 36 => "00110100", 
    37 => "00110110", 38 => "00111001", 39 => "00111011", 40 => "00111110", 
    41 => "01000000", 42 => "01000011", 43 => "01000101", 44 => "01000111", 
    45 => "01001001", 46 => "01001011", 47 => "01001101", 48 => "01001111", 
    49 => "01010001", 50 => "01010011", 51 => "01010101", 52 => "01010111", 
    53 => "01011001", 54 => "01011010", 55 => "01011100", 56 => "01011110", 
    57 => "01011111", 58 => "01100001", 59 => "01100010", 60 => "01100100", 
    61 => "01100101", 62 => "01100111", 63 => "01101000", 64 => "01101010", 
    65 => "01101011", 66 => "01101100", 67 => "01101110", 68 => "01101111", 
    69 => "01110000", 70 => "01110001", 71 => "01110011", 72 => "01110100", 
    73 => "01110101", 74 => "01110110", 75 => "01110111", 76 => "01111000", 
    77 => "01111010", 78 => "01111011", 79 => "01111100", 80 => "01111101", 
    81 => "01111110", 82 => "01111111", 83 => "10000000", 84 => "10000001", 
    85 => "10000010", 86 to 87=> "10000011", 88 => "10000100", 89 => "10000101", 
    90 => "10000110", 91 => "10000111", 92 => "10001000", 93 => "10001001", 
    94 to 95=> "10001010", 96 => "10001011", 97 => "10001100", 98 => "10001101", 
    99 to 100=> "10001110", 101 => "10001111", 102 to 103=> "10010000", 104 => "10010001", 
    105 => "10010010", 106 to 107=> "10010011", 108 => "10010100", 109 to 110=> "10010101", 
    111 => "10010110", 112 to 113=> "10010111", 114 => "10011000", 115 to 116=> "10011001", 
    117 to 118=> "10011010", 119 => "10011011", 120 to 121=> "10011100", 122 to 123=> "10011101", 
    124 to 125=> "10011110", 126 => "10011111", 127 to 128=> "10100000", 129 to 130=> "10100001", 
    131 to 132=> "10100010", 133 to 134=> "10100011", 135 to 136=> "10100100", 137 to 138=> "10100101", 
    139 to 140=> "10100110", 141 to 143=> "10100111", 144 to 145=> "10101000", 146 to 147=> "10101001", 
    148 to 149=> "10101010", 150 to 152=> "10101011", 153 to 154=> "10101100", 155 to 157=> "10101101", 
    158 to 159=> "10101110", 160 to 162=> "10101111", 163 to 165=> "10110000", 166 to 167=> "10110001", 
    168 to 170=> "10110010", 171 to 173=> "10110011", 174 to 176=> "10110100", 177 to 179=> "10110101", 
    180 to 182=> "10110110", 183 to 185=> "10110111", 186 to 189=> "10111000", 190 to 192=> "10111001", 
    193 to 196=> "10111010", 197 to 199=> "10111011", 200 to 203=> "10111100", 204 to 207=> "10111101", 
    208 to 211=> "10111110", 212 to 215=> "10111111", 216 to 219=> "11000000", 220 to 223=> "11000001", 
    224 to 227=> "11000010", 228 to 232=> "11000011", 233 to 237=> "11000100", 238 to 242=> "11000101", 
    243 to 246=> "11000110", 247 to 252=> "11000111", 253 to 257=> "11001000", 258 to 263=> "11001001", 
    264 to 268=> "11001010", 269 to 274=> "11001011", 275 to 280=> "11001100", 281 to 287=> "11001101", 
    288 to 293=> "11001110", 294 to 300=> "11001111", 301 to 307=> "11010000", 308 to 315=> "11010001", 
    316 to 322=> "11010010", 323 to 330=> "11010011", 331 to 339=> "11010100", 340 to 347=> "11010101", 
    348 to 357=> "11010110", 358 to 366=> "11010111", 367 to 376=> "11011000", 377 to 386=> "11011001", 
    387 to 397=> "11011010", 398 to 409=> "11011011", 410 to 421=> "11011100", 422 to 434=> "11011101", 
    435 to 447=> "11011110", 448 to 461=> "11011111", 462 to 476=> "11100000", 477 to 492=> "11100001", 
    493 to 509=> "11100010", 510 to 527=> "11100011", 528 to 546=> "11100100", 547 to 566=> "11100101", 
    567 to 588=> "11100110", 589 to 611=> "11100111", 612 to 636=> "11101000", 637 to 663=> "11101001", 
    664 to 693=> "11101010", 694 to 725=> "11101011", 726 to 760=> "11101100", 761 to 798=> "11101101", 
    799 to 840=> "11101110", 841 to 886=> "11101111", 887 to 938=> "11110000", 939 to 996=> "11110001", 
    997 to 1062=> "11110010", 1063 to 1137=> "11110011", 1138 to 1173=> "11110100" );
signal mem4 : mem_array := (
    0 to 21=> "00000000", 22 => "00000010", 23 => "00000110", 24 => "00001011", 
    25 => "00001111", 26 => "00010011", 27 => "00010111", 28 => "00011010", 
    29 => "00011110", 30 => "00100001", 31 => "00100101", 32 => "00101000", 
    33 => "00101011", 34 => "00101110", 35 => "00110001", 36 => "00110100", 
    37 => "00110110", 38 => "00111001", 39 => "00111011", 40 => "00111110", 
    41 => "01000000", 42 => "01000011", 43 => "01000101", 44 => "01000111", 
    45 => "01001001", 46 => "01001011", 47 => "01001101", 48 => "01001111", 
    49 => "01010001", 50 => "01010011", 51 => "01010101", 52 => "01010111", 
    53 => "01011001", 54 => "01011010", 55 => "01011100", 56 => "01011110", 
    57 => "01011111", 58 => "01100001", 59 => "01100010", 60 => "01100100", 
    61 => "01100101", 62 => "01100111", 63 => "01101000", 64 => "01101010", 
    65 => "01101011", 66 => "01101100", 67 => "01101110", 68 => "01101111", 
    69 => "01110000", 70 => "01110001", 71 => "01110011", 72 => "01110100", 
    73 => "01110101", 74 => "01110110", 75 => "01110111", 76 => "01111000", 
    77 => "01111010", 78 => "01111011", 79 => "01111100", 80 => "01111101", 
    81 => "01111110", 82 => "01111111", 83 => "10000000", 84 => "10000001", 
    85 => "10000010", 86 to 87=> "10000011", 88 => "10000100", 89 => "10000101", 
    90 => "10000110", 91 => "10000111", 92 => "10001000", 93 => "10001001", 
    94 to 95=> "10001010", 96 => "10001011", 97 => "10001100", 98 => "10001101", 
    99 to 100=> "10001110", 101 => "10001111", 102 to 103=> "10010000", 104 => "10010001", 
    105 => "10010010", 106 to 107=> "10010011", 108 => "10010100", 109 to 110=> "10010101", 
    111 => "10010110", 112 to 113=> "10010111", 114 => "10011000", 115 to 116=> "10011001", 
    117 to 118=> "10011010", 119 => "10011011", 120 to 121=> "10011100", 122 to 123=> "10011101", 
    124 to 125=> "10011110", 126 => "10011111", 127 to 128=> "10100000", 129 to 130=> "10100001", 
    131 to 132=> "10100010", 133 to 134=> "10100011", 135 to 136=> "10100100", 137 to 138=> "10100101", 
    139 to 140=> "10100110", 141 to 143=> "10100111", 144 to 145=> "10101000", 146 to 147=> "10101001", 
    148 to 149=> "10101010", 150 to 152=> "10101011", 153 to 154=> "10101100", 155 to 157=> "10101101", 
    158 to 159=> "10101110", 160 to 162=> "10101111", 163 to 165=> "10110000", 166 to 167=> "10110001", 
    168 to 170=> "10110010", 171 to 173=> "10110011", 174 to 176=> "10110100", 177 to 179=> "10110101", 
    180 to 182=> "10110110", 183 to 185=> "10110111", 186 to 189=> "10111000", 190 to 192=> "10111001", 
    193 to 196=> "10111010", 197 to 199=> "10111011", 200 to 203=> "10111100", 204 to 207=> "10111101", 
    208 to 211=> "10111110", 212 to 215=> "10111111", 216 to 219=> "11000000", 220 to 223=> "11000001", 
    224 to 227=> "11000010", 228 to 232=> "11000011", 233 to 237=> "11000100", 238 to 242=> "11000101", 
    243 to 246=> "11000110", 247 to 252=> "11000111", 253 to 257=> "11001000", 258 to 263=> "11001001", 
    264 to 268=> "11001010", 269 to 274=> "11001011", 275 to 280=> "11001100", 281 to 287=> "11001101", 
    288 to 293=> "11001110", 294 to 300=> "11001111", 301 to 307=> "11010000", 308 to 315=> "11010001", 
    316 to 322=> "11010010", 323 to 330=> "11010011", 331 to 339=> "11010100", 340 to 347=> "11010101", 
    348 to 357=> "11010110", 358 to 366=> "11010111", 367 to 376=> "11011000", 377 to 386=> "11011001", 
    387 to 397=> "11011010", 398 to 409=> "11011011", 410 to 421=> "11011100", 422 to 434=> "11011101", 
    435 to 447=> "11011110", 448 to 461=> "11011111", 462 to 476=> "11100000", 477 to 492=> "11100001", 
    493 to 509=> "11100010", 510 to 527=> "11100011", 528 to 546=> "11100100", 547 to 566=> "11100101", 
    567 to 588=> "11100110", 589 to 611=> "11100111", 612 to 636=> "11101000", 637 to 663=> "11101001", 
    664 to 693=> "11101010", 694 to 725=> "11101011", 726 to 760=> "11101100", 761 to 798=> "11101101", 
    799 to 840=> "11101110", 841 to 886=> "11101111", 887 to 938=> "11110000", 939 to 996=> "11110001", 
    997 to 1062=> "11110010", 1063 to 1137=> "11110011", 1138 to 1173=> "11110100" );
signal mem5 : mem_array := (
    0 to 21=> "00000000", 22 => "00000010", 23 => "00000110", 24 => "00001011", 
    25 => "00001111", 26 => "00010011", 27 => "00010111", 28 => "00011010", 
    29 => "00011110", 30 => "00100001", 31 => "00100101", 32 => "00101000", 
    33 => "00101011", 34 => "00101110", 35 => "00110001", 36 => "00110100", 
    37 => "00110110", 38 => "00111001", 39 => "00111011", 40 => "00111110", 
    41 => "01000000", 42 => "01000011", 43 => "01000101", 44 => "01000111", 
    45 => "01001001", 46 => "01001011", 47 => "01001101", 48 => "01001111", 
    49 => "01010001", 50 => "01010011", 51 => "01010101", 52 => "01010111", 
    53 => "01011001", 54 => "01011010", 55 => "01011100", 56 => "01011110", 
    57 => "01011111", 58 => "01100001", 59 => "01100010", 60 => "01100100", 
    61 => "01100101", 62 => "01100111", 63 => "01101000", 64 => "01101010", 
    65 => "01101011", 66 => "01101100", 67 => "01101110", 68 => "01101111", 
    69 => "01110000", 70 => "01110001", 71 => "01110011", 72 => "01110100", 
    73 => "01110101", 74 => "01110110", 75 => "01110111", 76 => "01111000", 
    77 => "01111010", 78 => "01111011", 79 => "01111100", 80 => "01111101", 
    81 => "01111110", 82 => "01111111", 83 => "10000000", 84 => "10000001", 
    85 => "10000010", 86 to 87=> "10000011", 88 => "10000100", 89 => "10000101", 
    90 => "10000110", 91 => "10000111", 92 => "10001000", 93 => "10001001", 
    94 to 95=> "10001010", 96 => "10001011", 97 => "10001100", 98 => "10001101", 
    99 to 100=> "10001110", 101 => "10001111", 102 to 103=> "10010000", 104 => "10010001", 
    105 => "10010010", 106 to 107=> "10010011", 108 => "10010100", 109 to 110=> "10010101", 
    111 => "10010110", 112 to 113=> "10010111", 114 => "10011000", 115 to 116=> "10011001", 
    117 to 118=> "10011010", 119 => "10011011", 120 to 121=> "10011100", 122 to 123=> "10011101", 
    124 to 125=> "10011110", 126 => "10011111", 127 to 128=> "10100000", 129 to 130=> "10100001", 
    131 to 132=> "10100010", 133 to 134=> "10100011", 135 to 136=> "10100100", 137 to 138=> "10100101", 
    139 to 140=> "10100110", 141 to 143=> "10100111", 144 to 145=> "10101000", 146 to 147=> "10101001", 
    148 to 149=> "10101010", 150 to 152=> "10101011", 153 to 154=> "10101100", 155 to 157=> "10101101", 
    158 to 159=> "10101110", 160 to 162=> "10101111", 163 to 165=> "10110000", 166 to 167=> "10110001", 
    168 to 170=> "10110010", 171 to 173=> "10110011", 174 to 176=> "10110100", 177 to 179=> "10110101", 
    180 to 182=> "10110110", 183 to 185=> "10110111", 186 to 189=> "10111000", 190 to 192=> "10111001", 
    193 to 196=> "10111010", 197 to 199=> "10111011", 200 to 203=> "10111100", 204 to 207=> "10111101", 
    208 to 211=> "10111110", 212 to 215=> "10111111", 216 to 219=> "11000000", 220 to 223=> "11000001", 
    224 to 227=> "11000010", 228 to 232=> "11000011", 233 to 237=> "11000100", 238 to 242=> "11000101", 
    243 to 246=> "11000110", 247 to 252=> "11000111", 253 to 257=> "11001000", 258 to 263=> "11001001", 
    264 to 268=> "11001010", 269 to 274=> "11001011", 275 to 280=> "11001100", 281 to 287=> "11001101", 
    288 to 293=> "11001110", 294 to 300=> "11001111", 301 to 307=> "11010000", 308 to 315=> "11010001", 
    316 to 322=> "11010010", 323 to 330=> "11010011", 331 to 339=> "11010100", 340 to 347=> "11010101", 
    348 to 357=> "11010110", 358 to 366=> "11010111", 367 to 376=> "11011000", 377 to 386=> "11011001", 
    387 to 397=> "11011010", 398 to 409=> "11011011", 410 to 421=> "11011100", 422 to 434=> "11011101", 
    435 to 447=> "11011110", 448 to 461=> "11011111", 462 to 476=> "11100000", 477 to 492=> "11100001", 
    493 to 509=> "11100010", 510 to 527=> "11100011", 528 to 546=> "11100100", 547 to 566=> "11100101", 
    567 to 588=> "11100110", 589 to 611=> "11100111", 612 to 636=> "11101000", 637 to 663=> "11101001", 
    664 to 693=> "11101010", 694 to 725=> "11101011", 726 to 760=> "11101100", 761 to 798=> "11101101", 
    799 to 840=> "11101110", 841 to 886=> "11101111", 887 to 938=> "11110000", 939 to 996=> "11110001", 
    997 to 1062=> "11110010", 1063 to 1137=> "11110011", 1138 to 1173=> "11110100" );
signal mem6 : mem_array := (
    0 to 21=> "00000000", 22 => "00000010", 23 => "00000110", 24 => "00001011", 
    25 => "00001111", 26 => "00010011", 27 => "00010111", 28 => "00011010", 
    29 => "00011110", 30 => "00100001", 31 => "00100101", 32 => "00101000", 
    33 => "00101011", 34 => "00101110", 35 => "00110001", 36 => "00110100", 
    37 => "00110110", 38 => "00111001", 39 => "00111011", 40 => "00111110", 
    41 => "01000000", 42 => "01000011", 43 => "01000101", 44 => "01000111", 
    45 => "01001001", 46 => "01001011", 47 => "01001101", 48 => "01001111", 
    49 => "01010001", 50 => "01010011", 51 => "01010101", 52 => "01010111", 
    53 => "01011001", 54 => "01011010", 55 => "01011100", 56 => "01011110", 
    57 => "01011111", 58 => "01100001", 59 => "01100010", 60 => "01100100", 
    61 => "01100101", 62 => "01100111", 63 => "01101000", 64 => "01101010", 
    65 => "01101011", 66 => "01101100", 67 => "01101110", 68 => "01101111", 
    69 => "01110000", 70 => "01110001", 71 => "01110011", 72 => "01110100", 
    73 => "01110101", 74 => "01110110", 75 => "01110111", 76 => "01111000", 
    77 => "01111010", 78 => "01111011", 79 => "01111100", 80 => "01111101", 
    81 => "01111110", 82 => "01111111", 83 => "10000000", 84 => "10000001", 
    85 => "10000010", 86 to 87=> "10000011", 88 => "10000100", 89 => "10000101", 
    90 => "10000110", 91 => "10000111", 92 => "10001000", 93 => "10001001", 
    94 to 95=> "10001010", 96 => "10001011", 97 => "10001100", 98 => "10001101", 
    99 to 100=> "10001110", 101 => "10001111", 102 to 103=> "10010000", 104 => "10010001", 
    105 => "10010010", 106 to 107=> "10010011", 108 => "10010100", 109 to 110=> "10010101", 
    111 => "10010110", 112 to 113=> "10010111", 114 => "10011000", 115 to 116=> "10011001", 
    117 to 118=> "10011010", 119 => "10011011", 120 to 121=> "10011100", 122 to 123=> "10011101", 
    124 to 125=> "10011110", 126 => "10011111", 127 to 128=> "10100000", 129 to 130=> "10100001", 
    131 to 132=> "10100010", 133 to 134=> "10100011", 135 to 136=> "10100100", 137 to 138=> "10100101", 
    139 to 140=> "10100110", 141 to 143=> "10100111", 144 to 145=> "10101000", 146 to 147=> "10101001", 
    148 to 149=> "10101010", 150 to 152=> "10101011", 153 to 154=> "10101100", 155 to 157=> "10101101", 
    158 to 159=> "10101110", 160 to 162=> "10101111", 163 to 165=> "10110000", 166 to 167=> "10110001", 
    168 to 170=> "10110010", 171 to 173=> "10110011", 174 to 176=> "10110100", 177 to 179=> "10110101", 
    180 to 182=> "10110110", 183 to 185=> "10110111", 186 to 189=> "10111000", 190 to 192=> "10111001", 
    193 to 196=> "10111010", 197 to 199=> "10111011", 200 to 203=> "10111100", 204 to 207=> "10111101", 
    208 to 211=> "10111110", 212 to 215=> "10111111", 216 to 219=> "11000000", 220 to 223=> "11000001", 
    224 to 227=> "11000010", 228 to 232=> "11000011", 233 to 237=> "11000100", 238 to 242=> "11000101", 
    243 to 246=> "11000110", 247 to 252=> "11000111", 253 to 257=> "11001000", 258 to 263=> "11001001", 
    264 to 268=> "11001010", 269 to 274=> "11001011", 275 to 280=> "11001100", 281 to 287=> "11001101", 
    288 to 293=> "11001110", 294 to 300=> "11001111", 301 to 307=> "11010000", 308 to 315=> "11010001", 
    316 to 322=> "11010010", 323 to 330=> "11010011", 331 to 339=> "11010100", 340 to 347=> "11010101", 
    348 to 357=> "11010110", 358 to 366=> "11010111", 367 to 376=> "11011000", 377 to 386=> "11011001", 
    387 to 397=> "11011010", 398 to 409=> "11011011", 410 to 421=> "11011100", 422 to 434=> "11011101", 
    435 to 447=> "11011110", 448 to 461=> "11011111", 462 to 476=> "11100000", 477 to 492=> "11100001", 
    493 to 509=> "11100010", 510 to 527=> "11100011", 528 to 546=> "11100100", 547 to 566=> "11100101", 
    567 to 588=> "11100110", 589 to 611=> "11100111", 612 to 636=> "11101000", 637 to 663=> "11101001", 
    664 to 693=> "11101010", 694 to 725=> "11101011", 726 to 760=> "11101100", 761 to 798=> "11101101", 
    799 to 840=> "11101110", 841 to 886=> "11101111", 887 to 938=> "11110000", 939 to 996=> "11110001", 
    997 to 1062=> "11110010", 1063 to 1137=> "11110011", 1138 to 1173=> "11110100" );
signal mem7 : mem_array := (
    0 to 21=> "00000000", 22 => "00000010", 23 => "00000110", 24 => "00001011", 
    25 => "00001111", 26 => "00010011", 27 => "00010111", 28 => "00011010", 
    29 => "00011110", 30 => "00100001", 31 => "00100101", 32 => "00101000", 
    33 => "00101011", 34 => "00101110", 35 => "00110001", 36 => "00110100", 
    37 => "00110110", 38 => "00111001", 39 => "00111011", 40 => "00111110", 
    41 => "01000000", 42 => "01000011", 43 => "01000101", 44 => "01000111", 
    45 => "01001001", 46 => "01001011", 47 => "01001101", 48 => "01001111", 
    49 => "01010001", 50 => "01010011", 51 => "01010101", 52 => "01010111", 
    53 => "01011001", 54 => "01011010", 55 => "01011100", 56 => "01011110", 
    57 => "01011111", 58 => "01100001", 59 => "01100010", 60 => "01100100", 
    61 => "01100101", 62 => "01100111", 63 => "01101000", 64 => "01101010", 
    65 => "01101011", 66 => "01101100", 67 => "01101110", 68 => "01101111", 
    69 => "01110000", 70 => "01110001", 71 => "01110011", 72 => "01110100", 
    73 => "01110101", 74 => "01110110", 75 => "01110111", 76 => "01111000", 
    77 => "01111010", 78 => "01111011", 79 => "01111100", 80 => "01111101", 
    81 => "01111110", 82 => "01111111", 83 => "10000000", 84 => "10000001", 
    85 => "10000010", 86 to 87=> "10000011", 88 => "10000100", 89 => "10000101", 
    90 => "10000110", 91 => "10000111", 92 => "10001000", 93 => "10001001", 
    94 to 95=> "10001010", 96 => "10001011", 97 => "10001100", 98 => "10001101", 
    99 to 100=> "10001110", 101 => "10001111", 102 to 103=> "10010000", 104 => "10010001", 
    105 => "10010010", 106 to 107=> "10010011", 108 => "10010100", 109 to 110=> "10010101", 
    111 => "10010110", 112 to 113=> "10010111", 114 => "10011000", 115 to 116=> "10011001", 
    117 to 118=> "10011010", 119 => "10011011", 120 to 121=> "10011100", 122 to 123=> "10011101", 
    124 to 125=> "10011110", 126 => "10011111", 127 to 128=> "10100000", 129 to 130=> "10100001", 
    131 to 132=> "10100010", 133 to 134=> "10100011", 135 to 136=> "10100100", 137 to 138=> "10100101", 
    139 to 140=> "10100110", 141 to 143=> "10100111", 144 to 145=> "10101000", 146 to 147=> "10101001", 
    148 to 149=> "10101010", 150 to 152=> "10101011", 153 to 154=> "10101100", 155 to 157=> "10101101", 
    158 to 159=> "10101110", 160 to 162=> "10101111", 163 to 165=> "10110000", 166 to 167=> "10110001", 
    168 to 170=> "10110010", 171 to 173=> "10110011", 174 to 176=> "10110100", 177 to 179=> "10110101", 
    180 to 182=> "10110110", 183 to 185=> "10110111", 186 to 189=> "10111000", 190 to 192=> "10111001", 
    193 to 196=> "10111010", 197 to 199=> "10111011", 200 to 203=> "10111100", 204 to 207=> "10111101", 
    208 to 211=> "10111110", 212 to 215=> "10111111", 216 to 219=> "11000000", 220 to 223=> "11000001", 
    224 to 227=> "11000010", 228 to 232=> "11000011", 233 to 237=> "11000100", 238 to 242=> "11000101", 
    243 to 246=> "11000110", 247 to 252=> "11000111", 253 to 257=> "11001000", 258 to 263=> "11001001", 
    264 to 268=> "11001010", 269 to 274=> "11001011", 275 to 280=> "11001100", 281 to 287=> "11001101", 
    288 to 293=> "11001110", 294 to 300=> "11001111", 301 to 307=> "11010000", 308 to 315=> "11010001", 
    316 to 322=> "11010010", 323 to 330=> "11010011", 331 to 339=> "11010100", 340 to 347=> "11010101", 
    348 to 357=> "11010110", 358 to 366=> "11010111", 367 to 376=> "11011000", 377 to 386=> "11011001", 
    387 to 397=> "11011010", 398 to 409=> "11011011", 410 to 421=> "11011100", 422 to 434=> "11011101", 
    435 to 447=> "11011110", 448 to 461=> "11011111", 462 to 476=> "11100000", 477 to 492=> "11100001", 
    493 to 509=> "11100010", 510 to 527=> "11100011", 528 to 546=> "11100100", 547 to 566=> "11100101", 
    567 to 588=> "11100110", 589 to 611=> "11100111", 612 to 636=> "11101000", 637 to 663=> "11101001", 
    664 to 693=> "11101010", 694 to 725=> "11101011", 726 to 760=> "11101100", 761 to 798=> "11101101", 
    799 to 840=> "11101110", 841 to 886=> "11101111", 887 to 938=> "11110000", 939 to 996=> "11110001", 
    997 to 1062=> "11110010", 1063 to 1137=> "11110011", 1138 to 1173=> "11110100" );

attribute syn_rom_style : string;
attribute syn_rom_style of mem0 : signal is "block_rom";
attribute syn_rom_style of mem1 : signal is "block_rom";
attribute syn_rom_style of mem2 : signal is "block_rom";
attribute syn_rom_style of mem3 : signal is "block_rom";
attribute syn_rom_style of mem4 : signal is "block_rom";
attribute syn_rom_style of mem5 : signal is "block_rom";
attribute syn_rom_style of mem6 : signal is "block_rom";
attribute syn_rom_style of mem7 : signal is "block_rom";
attribute ROM_STYLE : string;
attribute ROM_STYLE of mem0 : signal is "block";
attribute ROM_STYLE of mem1 : signal is "block";
attribute ROM_STYLE of mem2 : signal is "block";
attribute ROM_STYLE of mem3 : signal is "block";
attribute ROM_STYLE of mem4 : signal is "block";
attribute ROM_STYLE of mem5 : signal is "block";
attribute ROM_STYLE of mem6 : signal is "block";
attribute ROM_STYLE of mem7 : signal is "block";

begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

memory_access_guard_1: process (addr1) 
begin
      addr1_tmp <= addr1;
--synthesis translate_off
      if (CONV_INTEGER(addr1) > mem_size-1) then
           addr1_tmp <= (others => '0');
      else 
           addr1_tmp <= addr1;
      end if;
--synthesis translate_on
end process;

memory_access_guard_2: process (addr2) 
begin
      addr2_tmp <= addr2;
--synthesis translate_off
      if (CONV_INTEGER(addr2) > mem_size-1) then
           addr2_tmp <= (others => '0');
      else 
           addr2_tmp <= addr2;
      end if;
--synthesis translate_on
end process;

memory_access_guard_3: process (addr3) 
begin
      addr3_tmp <= addr3;
--synthesis translate_off
      if (CONV_INTEGER(addr3) > mem_size-1) then
           addr3_tmp <= (others => '0');
      else 
           addr3_tmp <= addr3;
      end if;
--synthesis translate_on
end process;

memory_access_guard_4: process (addr4) 
begin
      addr4_tmp <= addr4;
--synthesis translate_off
      if (CONV_INTEGER(addr4) > mem_size-1) then
           addr4_tmp <= (others => '0');
      else 
           addr4_tmp <= addr4;
      end if;
--synthesis translate_on
end process;

memory_access_guard_5: process (addr5) 
begin
      addr5_tmp <= addr5;
--synthesis translate_off
      if (CONV_INTEGER(addr5) > mem_size-1) then
           addr5_tmp <= (others => '0');
      else 
           addr5_tmp <= addr5;
      end if;
--synthesis translate_on
end process;

memory_access_guard_6: process (addr6) 
begin
      addr6_tmp <= addr6;
--synthesis translate_off
      if (CONV_INTEGER(addr6) > mem_size-1) then
           addr6_tmp <= (others => '0');
      else 
           addr6_tmp <= addr6;
      end if;
--synthesis translate_on
end process;

memory_access_guard_7: process (addr7) 
begin
      addr7_tmp <= addr7;
--synthesis translate_off
      if (CONV_INTEGER(addr7) > mem_size-1) then
           addr7_tmp <= (others => '0');
      else 
           addr7_tmp <= addr7;
      end if;
--synthesis translate_on
end process;

memory_access_guard_8: process (addr8) 
begin
      addr8_tmp <= addr8;
--synthesis translate_off
      if (CONV_INTEGER(addr8) > mem_size-1) then
           addr8_tmp <= (others => '0');
      else 
           addr8_tmp <= addr8;
      end if;
--synthesis translate_on
end process;

memory_access_guard_9: process (addr9) 
begin
      addr9_tmp <= addr9;
--synthesis translate_off
      if (CONV_INTEGER(addr9) > mem_size-1) then
           addr9_tmp <= (others => '0');
      else 
           addr9_tmp <= addr9;
      end if;
--synthesis translate_on
end process;

memory_access_guard_10: process (addr10) 
begin
      addr10_tmp <= addr10;
--synthesis translate_off
      if (CONV_INTEGER(addr10) > mem_size-1) then
           addr10_tmp <= (others => '0');
      else 
           addr10_tmp <= addr10;
      end if;
--synthesis translate_on
end process;

memory_access_guard_11: process (addr11) 
begin
      addr11_tmp <= addr11;
--synthesis translate_off
      if (CONV_INTEGER(addr11) > mem_size-1) then
           addr11_tmp <= (others => '0');
      else 
           addr11_tmp <= addr11;
      end if;
--synthesis translate_on
end process;

memory_access_guard_12: process (addr12) 
begin
      addr12_tmp <= addr12;
--synthesis translate_off
      if (CONV_INTEGER(addr12) > mem_size-1) then
           addr12_tmp <= (others => '0');
      else 
           addr12_tmp <= addr12;
      end if;
--synthesis translate_on
end process;

memory_access_guard_13: process (addr13) 
begin
      addr13_tmp <= addr13;
--synthesis translate_off
      if (CONV_INTEGER(addr13) > mem_size-1) then
           addr13_tmp <= (others => '0');
      else 
           addr13_tmp <= addr13;
      end if;
--synthesis translate_on
end process;

memory_access_guard_14: process (addr14) 
begin
      addr14_tmp <= addr14;
--synthesis translate_off
      if (CONV_INTEGER(addr14) > mem_size-1) then
           addr14_tmp <= (others => '0');
      else 
           addr14_tmp <= addr14;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem0(CONV_INTEGER(addr0_tmp)); 
        end if;
        if (ce1 = '1') then 
            q1 <= mem0(CONV_INTEGER(addr1_tmp)); 
        end if;
        if (ce2 = '1') then 
            q2 <= mem1(CONV_INTEGER(addr2_tmp)); 
        end if;
        if (ce3 = '1') then 
            q3 <= mem1(CONV_INTEGER(addr3_tmp)); 
        end if;
        if (ce4 = '1') then 
            q4 <= mem2(CONV_INTEGER(addr4_tmp)); 
        end if;
        if (ce5 = '1') then 
            q5 <= mem2(CONV_INTEGER(addr5_tmp)); 
        end if;
        if (ce6 = '1') then 
            q6 <= mem3(CONV_INTEGER(addr6_tmp)); 
        end if;
        if (ce7 = '1') then 
            q7 <= mem3(CONV_INTEGER(addr7_tmp)); 
        end if;
        if (ce8 = '1') then 
            q8 <= mem4(CONV_INTEGER(addr8_tmp)); 
        end if;
        if (ce9 = '1') then 
            q9 <= mem4(CONV_INTEGER(addr9_tmp)); 
        end if;
        if (ce10 = '1') then 
            q10 <= mem5(CONV_INTEGER(addr10_tmp)); 
        end if;
        if (ce11 = '1') then 
            q11 <= mem5(CONV_INTEGER(addr11_tmp)); 
        end if;
        if (ce12 = '1') then 
            q12 <= mem6(CONV_INTEGER(addr12_tmp)); 
        end if;
        if (ce13 = '1') then 
            q13 <= mem6(CONV_INTEGER(addr13_tmp)); 
        end if;
        if (ce14 = '1') then 
            q14 <= mem7(CONV_INTEGER(addr14_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity simple_puppi_hw_pocq is
    generic (
        DataWidth : INTEGER := 8;
        AddressRange : INTEGER := 1174;
        AddressWidth : INTEGER := 11);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0);
        address1 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0);
        address2 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce2 : IN STD_LOGIC;
        q2 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0);
        address3 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce3 : IN STD_LOGIC;
        q3 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0);
        address4 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce4 : IN STD_LOGIC;
        q4 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0);
        address5 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce5 : IN STD_LOGIC;
        q5 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0);
        address6 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce6 : IN STD_LOGIC;
        q6 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0);
        address7 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce7 : IN STD_LOGIC;
        q7 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0);
        address8 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce8 : IN STD_LOGIC;
        q8 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0);
        address9 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce9 : IN STD_LOGIC;
        q9 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0);
        address10 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce10 : IN STD_LOGIC;
        q10 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0);
        address11 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce11 : IN STD_LOGIC;
        q11 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0);
        address12 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce12 : IN STD_LOGIC;
        q12 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0);
        address13 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce13 : IN STD_LOGIC;
        q13 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0);
        address14 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce14 : IN STD_LOGIC;
        q14 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of simple_puppi_hw_pocq is
    component simple_puppi_hw_pocq_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR;
            addr1 : IN STD_LOGIC_VECTOR;
            ce1 : IN STD_LOGIC;
            q1 : OUT STD_LOGIC_VECTOR;
            addr2 : IN STD_LOGIC_VECTOR;
            ce2 : IN STD_LOGIC;
            q2 : OUT STD_LOGIC_VECTOR;
            addr3 : IN STD_LOGIC_VECTOR;
            ce3 : IN STD_LOGIC;
            q3 : OUT STD_LOGIC_VECTOR;
            addr4 : IN STD_LOGIC_VECTOR;
            ce4 : IN STD_LOGIC;
            q4 : OUT STD_LOGIC_VECTOR;
            addr5 : IN STD_LOGIC_VECTOR;
            ce5 : IN STD_LOGIC;
            q5 : OUT STD_LOGIC_VECTOR;
            addr6 : IN STD_LOGIC_VECTOR;
            ce6 : IN STD_LOGIC;
            q6 : OUT STD_LOGIC_VECTOR;
            addr7 : IN STD_LOGIC_VECTOR;
            ce7 : IN STD_LOGIC;
            q7 : OUT STD_LOGIC_VECTOR;
            addr8 : IN STD_LOGIC_VECTOR;
            ce8 : IN STD_LOGIC;
            q8 : OUT STD_LOGIC_VECTOR;
            addr9 : IN STD_LOGIC_VECTOR;
            ce9 : IN STD_LOGIC;
            q9 : OUT STD_LOGIC_VECTOR;
            addr10 : IN STD_LOGIC_VECTOR;
            ce10 : IN STD_LOGIC;
            q10 : OUT STD_LOGIC_VECTOR;
            addr11 : IN STD_LOGIC_VECTOR;
            ce11 : IN STD_LOGIC;
            q11 : OUT STD_LOGIC_VECTOR;
            addr12 : IN STD_LOGIC_VECTOR;
            ce12 : IN STD_LOGIC;
            q12 : OUT STD_LOGIC_VECTOR;
            addr13 : IN STD_LOGIC_VECTOR;
            ce13 : IN STD_LOGIC;
            q13 : OUT STD_LOGIC_VECTOR;
            addr14 : IN STD_LOGIC_VECTOR;
            ce14 : IN STD_LOGIC;
            q14 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    simple_puppi_hw_pocq_rom_U :  component simple_puppi_hw_pocq_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0,
        addr1 => address1,
        ce1 => ce1,
        q1 => q1,
        addr2 => address2,
        ce2 => ce2,
        q2 => q2,
        addr3 => address3,
        ce3 => ce3,
        q3 => q3,
        addr4 => address4,
        ce4 => ce4,
        q4 => q4,
        addr5 => address5,
        ce5 => ce5,
        q5 => q5,
        addr6 => address6,
        ce6 => ce6,
        q6 => q6,
        addr7 => address7,
        ce7 => ce7,
        q7 => q7,
        addr8 => address8,
        ce8 => ce8,
        q8 => q8,
        addr9 => address9,
        ce9 => ce9,
        q9 => q9,
        addr10 => address10,
        ce10 => ce10,
        q10 => q10,
        addr11 => address11,
        ce11 => ce11,
        q11 => q11,
        addr12 => address12,
        ce12 => ce12,
        q12 => q12,
        addr13 => address13,
        ce13 => ce13,
        q13 => q13,
        addr14 => address14,
        ce14 => ce14,
        q14 => q14);

end architecture;


