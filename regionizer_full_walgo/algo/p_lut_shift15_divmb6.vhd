-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.1
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity p_lut_shift15_divmb6_rom is 
    generic(
             dwidth     : integer := 16; 
             awidth     : integer := 9; 
             mem_size    : integer := 512
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of p_lut_shift15_divmb6_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 to 1=> "1000000000000000", 2 => "0100000000000000", 3 => "0010101010101010", 
    4 => "0010000000000000", 5 => "0001100110011001", 6 => "0001010101010101", 
    7 => "0001001001001001", 8 => "0001000000000000", 9 => "0000111000111000", 
    10 => "0000110011001100", 11 => "0000101110100010", 12 => "0000101010101010", 
    13 => "0000100111011000", 14 => "0000100100100100", 15 => "0000100010001000", 
    16 => "0000100000000000", 17 => "0000011110000111", 18 => "0000011100011100", 
    19 => "0000011010111100", 20 => "0000011001100110", 21 => "0000011000011000", 
    22 => "0000010111010001", 23 => "0000010110010000", 24 => "0000010101010101", 
    25 => "0000010100011110", 26 => "0000010011101100", 27 => "0000010010111101", 
    28 => "0000010010010010", 29 => "0000010001101001", 30 => "0000010001000100", 
    31 => "0000010000100001", 32 => "0000010000000000", 33 => "0000001111100000", 
    34 => "0000001111000011", 35 => "0000001110101000", 36 => "0000001110001110", 
    37 => "0000001101110101", 38 => "0000001101011110", 39 => "0000001101001000", 
    40 => "0000001100110011", 41 => "0000001100011111", 42 => "0000001100001100", 
    43 => "0000001011111010", 44 => "0000001011101000", 45 => "0000001011011000", 
    46 => "0000001011001000", 47 => "0000001010111001", 48 => "0000001010101010", 
    49 => "0000001010011100", 50 => "0000001010001111", 51 => "0000001010000010", 
    52 => "0000001001110110", 53 => "0000001001101010", 54 => "0000001001011110", 
    55 => "0000001001010011", 56 => "0000001001001001", 57 => "0000001000111110", 
    58 => "0000001000110100", 59 => "0000001000101011", 60 => "0000001000100010", 
    61 => "0000001000011001", 62 => "0000001000010000", 63 => "0000001000001000", 
    64 => "0000001000000000", 65 => "0000000111111000", 66 => "0000000111110000", 
    67 => "0000000111101001", 68 => "0000000111100001", 69 => "0000000111011010", 
    70 => "0000000111010100", 71 => "0000000111001101", 72 => "0000000111000111", 
    73 => "0000000111000000", 74 => "0000000110111010", 75 => "0000000110110100", 
    76 => "0000000110101111", 77 => "0000000110101001", 78 => "0000000110100100", 
    79 => "0000000110011110", 80 => "0000000110011001", 81 => "0000000110010100", 
    82 => "0000000110001111", 83 => "0000000110001010", 84 => "0000000110000110", 
    85 => "0000000110000001", 86 => "0000000101111101", 87 => "0000000101111000", 
    88 => "0000000101110100", 89 => "0000000101110000", 90 => "0000000101101100", 
    91 => "0000000101101000", 92 => "0000000101100100", 93 => "0000000101100000", 
    94 => "0000000101011100", 95 => "0000000101011000", 96 => "0000000101010101", 
    97 => "0000000101010001", 98 => "0000000101001110", 99 => "0000000101001010", 
    100 => "0000000101000111", 101 => "0000000101000100", 102 => "0000000101000001", 
    103 => "0000000100111110", 104 => "0000000100111011", 105 => "0000000100111000", 
    106 => "0000000100110101", 107 => "0000000100110010", 108 => "0000000100101111", 
    109 => "0000000100101100", 110 => "0000000100101001", 111 => "0000000100100111", 
    112 => "0000000100100100", 113 => "0000000100100001", 114 => "0000000100011111", 
    115 => "0000000100011100", 116 => "0000000100011010", 117 => "0000000100011000", 
    118 => "0000000100010101", 119 => "0000000100010011", 120 => "0000000100010001", 
    121 => "0000000100001110", 122 => "0000000100001100", 123 => "0000000100001010", 
    124 => "0000000100001000", 125 => "0000000100000110", 126 => "0000000100000100", 
    127 => "0000000100000010", 128 => "0000000100000000", 129 => "0000000011111110", 
    130 => "0000000011111100", 131 => "0000000011111010", 132 => "0000000011111000", 
    133 => "0000000011110110", 134 => "0000000011110100", 135 => "0000000011110010", 
    136 => "0000000011110000", 137 => "0000000011101111", 138 => "0000000011101101", 
    139 => "0000000011101011", 140 => "0000000011101010", 141 => "0000000011101000", 
    142 => "0000000011100110", 143 => "0000000011100101", 144 => "0000000011100011", 
    145 => "0000000011100001", 146 => "0000000011100000", 147 => "0000000011011110", 
    148 => "0000000011011101", 149 => "0000000011011011", 150 => "0000000011011010", 
    151 => "0000000011011001", 152 => "0000000011010111", 153 => "0000000011010110", 
    154 => "0000000011010100", 155 => "0000000011010011", 156 => "0000000011010010", 
    157 => "0000000011010000", 158 => "0000000011001111", 159 => "0000000011001110", 
    160 => "0000000011001100", 161 => "0000000011001011", 162 => "0000000011001010", 
    163 => "0000000011001001", 164 => "0000000011000111", 165 => "0000000011000110", 
    166 => "0000000011000101", 167 => "0000000011000100", 168 => "0000000011000011", 
    169 => "0000000011000001", 170 => "0000000011000000", 171 => "0000000010111111", 
    172 => "0000000010111110", 173 => "0000000010111101", 174 => "0000000010111100", 
    175 => "0000000010111011", 176 => "0000000010111010", 177 => "0000000010111001", 
    178 => "0000000010111000", 179 => "0000000010110111", 180 => "0000000010110110", 
    181 => "0000000010110101", 182 => "0000000010110100", 183 => "0000000010110011", 
    184 => "0000000010110010", 185 => "0000000010110001", 186 => "0000000010110000", 
    187 => "0000000010101111", 188 => "0000000010101110", 189 => "0000000010101101", 
    190 => "0000000010101100", 191 => "0000000010101011", 192 => "0000000010101010", 
    193 => "0000000010101001", 194 to 195=> "0000000010101000", 196 => "0000000010100111", 
    197 => "0000000010100110", 198 => "0000000010100101", 199 => "0000000010100100", 
    200 to 201=> "0000000010100011", 202 => "0000000010100010", 203 => "0000000010100001", 
    204 => "0000000010100000", 205 to 206=> "0000000010011111", 207 => "0000000010011110", 
    208 => "0000000010011101", 209 to 210=> "0000000010011100", 211 => "0000000010011011", 
    212 => "0000000010011010", 213 to 214=> "0000000010011001", 215 => "0000000010011000", 
    216 to 217=> "0000000010010111", 218 => "0000000010010110", 219 => "0000000010010101", 
    220 to 221=> "0000000010010100", 222 => "0000000010010011", 223 to 224=> "0000000010010010", 
    225 => "0000000010010001", 226 to 227=> "0000000010010000", 228 to 229=> "0000000010001111", 
    230 => "0000000010001110", 231 to 232=> "0000000010001101", 233 to 234=> "0000000010001100", 
    235 => "0000000010001011", 236 to 237=> "0000000010001010", 238 to 239=> "0000000010001001", 
    240 => "0000000010001000", 241 to 242=> "0000000010000111", 243 to 244=> "0000000010000110", 
    245 to 246=> "0000000010000101", 247 to 248=> "0000000010000100", 249 to 250=> "0000000010000011", 
    251 to 252=> "0000000010000010", 253 to 254=> "0000000010000001", 255 to 256=> "0000000010000000", 
    257 to 258=> "0000000001111111", 259 to 260=> "0000000001111110", 261 to 262=> "0000000001111101", 
    263 to 264=> "0000000001111100", 265 to 266=> "0000000001111011", 267 to 268=> "0000000001111010", 
    269 to 270=> "0000000001111001", 271 to 273=> "0000000001111000", 274 to 275=> "0000000001110111", 
    276 to 277=> "0000000001110110", 278 to 280=> "0000000001110101", 281 to 282=> "0000000001110100", 
    283 to 284=> "0000000001110011", 285 to 287=> "0000000001110010", 288 to 289=> "0000000001110001", 
    290 to 292=> "0000000001110000", 293 to 295=> "0000000001101111", 296 to 297=> "0000000001101110", 
    298 to 300=> "0000000001101101", 301 to 303=> "0000000001101100", 304 to 306=> "0000000001101011", 
    307 to 309=> "0000000001101010", 310 to 312=> "0000000001101001", 313 to 315=> "0000000001101000", 
    316 to 318=> "0000000001100111", 319 to 321=> "0000000001100110", 322 to 324=> "0000000001100101", 
    325 to 327=> "0000000001100100", 328 to 330=> "0000000001100011", 331 to 334=> "0000000001100010", 
    335 to 337=> "0000000001100001", 338 to 341=> "0000000001100000", 342 to 344=> "0000000001011111", 
    345 to 348=> "0000000001011110", 349 to 352=> "0000000001011101", 353 to 356=> "0000000001011100", 
    357 to 360=> "0000000001011011", 361 to 364=> "0000000001011010", 365 to 368=> "0000000001011001", 
    369 to 372=> "0000000001011000", 373 to 376=> "0000000001010111", 377 to 381=> "0000000001010110", 
    382 to 385=> "0000000001010101", 386 to 390=> "0000000001010100", 391 to 394=> "0000000001010011", 
    395 to 399=> "0000000001010010", 400 to 404=> "0000000001010001", 405 to 409=> "0000000001010000", 
    410 to 414=> "0000000001001111", 415 to 420=> "0000000001001110", 421 to 425=> "0000000001001101", 
    426 to 431=> "0000000001001100", 432 to 436=> "0000000001001011", 437 to 442=> "0000000001001010", 
    443 to 448=> "0000000001001001", 449 to 455=> "0000000001001000", 456 to 461=> "0000000001000111", 
    462 to 468=> "0000000001000110", 469 to 474=> "0000000001000101", 475 to 481=> "0000000001000100", 
    482 to 489=> "0000000001000011", 490 to 496=> "0000000001000010", 497 to 504=> "0000000001000001", 
    505 to 511=> "0000000001000000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity p_lut_shift15_divmb6 is
    generic (
        DataWidth : INTEGER := 16;
        AddressRange : INTEGER := 512;
        AddressWidth : INTEGER := 9);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of p_lut_shift15_divmb6 is
    component p_lut_shift15_divmb6_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    p_lut_shift15_divmb6_rom_U :  component p_lut_shift15_divmb6_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


