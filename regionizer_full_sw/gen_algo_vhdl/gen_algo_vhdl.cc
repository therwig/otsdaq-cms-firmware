/*
 * Compile with  
 *
 *   g++ -std=c++11 <filename>
 *
 * 
 * Run with 
 *
 *   ./a.out
 *
 * Create by rrivera at fnal dot gov, May 2019
 */



#include <iostream>
#include <cstdio>
#include <sstream>

#include <vector>
#include <string>

using namespace std;

int main()
{
  vector<string> detectors({"tracker","emcalo","calo"});
  vector<int>    objectCounts({25,20,15});

  const string algoName = "mp7wrapped_pfalgo3_full";

  const int INPUT_PORTS  = 124;
  const int OUTPUT_PORTS = 114;

  FILE *fp = fopen("out.vhd","w");

  if(!fp)
    {
      cout << "Failed to open file." << endl;
      return 0;
    }

  //create entity declaration
  { 
    stringstream ss;
    ss << "\n\
-- ==============================================================\n\
--\n\
-- RTL generated by C++ written by rrivera at fnal dot gov\n\
-- May 2019\n\
-- \n\
-- ===========================================================\n\
\n\
library IEEE;\n\
use IEEE.std_logic_1164.all;\n\
use IEEE.numeric_std.all;\n\
\n\
use work.regionizer_pkg.all;\n\
use work.algo_pkg.all;\n\
\n\
entity algo_wrapper is\n\
\t" << "port (\n\
\t\t" << "clk : in std_logic;\n\
\n\
\t\t" << "valid_in : in std_logic;\n\
\t\t" << "objects_in : in raw_physics_object_arr_t(ALGO_INPUT_OBJECTS_COUNT-1 downto 0); --ALGO_INPUT_OBJECTS_COUNT constant defined in regionizer_pkg\n\
\n\
\t\t" << "valid_out: out std_logic;\n\
\t\t" << "results_out : out raw_algo_object_out_arr_t(ALGO_OBJECTS_OUT-1 downto 0);      --ALGO_OBJECTS_OUT constant defined in algo_pkg\n\
\n\
\t\t" << "reset : in std_logic\n\
\t);\n\n\n\
end entity algo_wrapper;\n\n\
" << endl;

    cout << ss.str();   
    fprintf(fp,ss.str().c_str());
  }
  
  //create start of arch and component declaration
  {
    stringstream ss;
    
    ss << "\n\
\n\
architecture behav of algo_wrapper is\n\
\n\
\n\
\tcomponent " << algoName << " is \n\
\t\t" << "port ( \n\
" << endl;

    int d = 0;
    int di = 0;
    for(int i=0;i<INPUT_PORTS;++i)      
      ss << "\t\t\t" << "input_" << i << "_V" << " \t : in  std_logic_vector(31 downto 0);" << endl;

    for(int i=0;i<OUTPUT_PORTS;++i)
      ss << "\t\t\t" << "output_" << i << "_V" << " \t : out std_logic_vector(31 downto 0);" << endl;

    ss << endl;
    ss << "\t\t\t" << "ap_clk  " << " \t : in  std_logic;" << endl;
    ss << "\t\t\t" << "ap_rst  " << " \t : in  std_logic;" << endl;
    ss << "\t\t\t" << "ap_start" << " \t : in  std_logic;" << endl;
    ss << "\t\t\t" << "ap_done " << " \t : out std_logic;" << endl;
    ss << "\t\t\t" << "ap_idle " << " \t : out std_logic;" << endl;
    ss << "\t\t\t" << "ap_ready" << " \t : out std_logic" << endl;

    ss << "\t);\n\
\tend component " << algoName << ";" << endl;

    ss << "\n\
\n\
\tsignal " << "algo_objects_out : raw_algo_object_out_arr_t(ALGO_OBJECTS_OUT-1 downto 0);\n\
\n\
begin\n\
\n\
\n\
\t" << "results_out <= algo_objects_out;\n\n\
" << endl;

    cout << ss.str();   
    fprintf(fp,ss.str().c_str());
  }

  //create algo component
  {
    stringstream ss;

    ss << "\n\n";

    ss << "\t" << "algo_instance" << " : " << algoName << endl;
    ss << "\t\t" << "port map (" << endl;
     
    int d = 0;
    int di = 0;
    for(int i=0;i<INPUT_PORTS;++i)
      {
	if(di < detectors.size())
	  {
	    if(d < objectCounts[di])
	      {
		if(i%2 == 0) //first half
		  //ss << "\t\t\t" << "input_" << i << "_V" << " \t => " << "objects_in." << detectors[di] << "(" << d << ")(31 downto 0)," << endl;
		  ss << "\t\t\t" << "input_" << i << "_V" << " \t => " << "objects_in" << "(" << i/2 << ")(31 downto 0)," << endl;
		else //second half
		  {
		    //ss << "\t\t\t" << "input_" << i << "_V" << " \t => " << "objects_in." << detectors[di] << "(" << d << ")(63 downto 32)," << endl;
		    ss << "\t\t\t" << "input_" << i << "_V" << " \t => " << "objects_in" << "(" << i/2 << ")(63 downto 32)," << endl;
		    ++d;
		  }
	      }
	    else //start new detector
	      {
		d = 0;
		++di; //increment detector
		--i; //redo i
		continue;
	      }
	  }
	else //done with detector objects
	  ss << "\t\t\t" << "input_" << i << "_V" << " \t => " << "null_raw_algo_object_in" << "," << endl;
      }

    for(int i=0;i<OUTPUT_PORTS;++i)
      {
	if(i%2 == 0) //first half
	  ss << "\t\t\t" << "output_" << i << "_V" << " \t => " << "algo_objects_out(" << i/2 << ")(31 downto 0)" << "," << endl;
	else //second half
	  ss << "\t\t\t" << "output_" << i << "_V" << " \t => " << "algo_objects_out(" << i/2 << ")(63 downto 32)" << "," << endl;
      }
      
    ss << endl;
    ss << "\t\t\t" << "ap_clk  " << " \t => " << "clk" << "," << endl;
    ss << "\t\t\t" << "ap_rst  " << " \t => " << "reset" << "," << endl;
    ss << "\t\t\t" << "ap_start" << " \t => " << "valid_in" << "," << endl;
    ss << "\t\t\t" << "ap_done " << " \t => " << "valid_out" << "," << endl;
    ss << "\t\t\t" << "ap_idle " << " \t => " << "open" << "," << endl;
    ss << "\t\t\t" << "ap_ready" << " \t => " << "open" << endl;

    ss << "\t\t);" << endl;
    
    ss << endl;
    ss << endl;
    ss << "end behav;" << endl;

    cout << ss.str();    
    fprintf(fp,ss.str().c_str());
  }

  cout << "\n\n--========================================" << endl;
  cout << "--========================================" << endl;

  

  if(fp) fclose(fp);
  cout << "\n\n\nDone." << endl;
  return 0;
}
